.cello {
  /* make things smooth */
  position: relative;
  transition: 500ms ease-in-out;
}

.cello::before {
  /* fully wrap the thing in cello */
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: hsla(0deg, 0%, 0%, 0.1);
  height: 100vh;
  pointer-events: none;
}

.cello.negative {
  filter: invert(1) brightness(0.8) saturate(1.2);
}

.cello.xray {
  filter: sepia(1) grayscale(1) invert(1);
}

.cello.ghost {
  filter: sepia(1) invert(1) brightness(0.9);
}

.cello.grayscale {
  filter: grayscale(1);
}

.cello.kodachrome {
  filter: saturate(2.22) brightness(1.3) contrast(1);
}

.cello.sepiatone {
  filter: sepia(0.75) brightness(1.1) contrast(1.1) saturate(1.1);
}

.cello.volcano {
  filter: hue-rotate(96deg) saturate(2.2) brightness(1.1) contrast(0.9);
}

.cello.arctic {
  filter: hue-rotate(110deg) saturate(0.9) brightness(1.2);
}

.cello.jungle {
  filter: hue-rotate(-80deg) saturate(2);
}
/*
TODO: refactor these dynamically in javascript to color the slices relative to each other
inputs:
  - a starting hue (in deg for hsla())
  - a step (size of iteration from 0 to 1)
  - qualities to leave static (h, s, l, a)
  - directions for iteration for each quality
  - number of iterations
output:
  like below for any number of slices
*/
.slice:nth-of-type(n) {
  background-color: hsla(180, 60%, 44%, 0.8);
}

.slice:nth-of-type(n+1) {
  background-color: hsla(190, 56%, 40%, 0.8);
}

.slice:nth-of-type(n+2) {
  background-color: hsla(200, 52%, 36%, 0.8);
}

.slice:nth-of-type(n+3) {
  background-color: hsla(210, 48%, 32%, 0.8);
}

.slice:nth-of-type(n+4) {
  background-color: hsla(220, 44%, 28%, 0.8);
}

.slice:nth-of-type(n+5) {
  background-color: hsla(230, 40%, 24%, 0.8);
}

.slice:nth-of-type(n+6) {
  background-color: hsla(240, 36%, 20%, 0.8);
}

.slice:nth-of-type(n+7) {
  background-color: hsla(250, 32%, 16%, 0.8);
}
